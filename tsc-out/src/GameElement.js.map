{"version":3,"file":"GameElement.js","sourceRoot":"","sources":["../../src/GameElement.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAE7C,MAAM,OAAO,WAAY,SAAQ,UAAU;IAmBzC;QACE,KAAK,EAAE,CAAA;QANM,WAAM,GAAkB,IAAI,aAAa,EAAE,CAAA;QAE3C,iBAAY,GAAW,CAAC,CAAA;QACxB,aAAQ,GAAW,CAAC,CAAA;QAIjC,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,YAAY,EAAE,CAAC,CAAA;IACrE,CAAC;IAED,IAAI,CAAE,UAAkB;QACtB,MAAM,SAAS,GAAG,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAA;QAClC,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QAExE,IAAI,QAAQ,GAAG,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAA;QACjG,SAAS,CAAC,QAAQ,EAAE,CAAA;QACpB,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,EAAE,CAAA;QACtC,IAAI,CAAC,WAAW,EAAE;YAChB,IAAI,CAAC,QAAQ,EAAE,CAAA;YACf,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA;SACtB;aAAM;YACL,IAAI,CAAC,YAAY,EAAE,CAAA;SACpB;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACnB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACpB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;UAIL,IAAI,CAAC,MAAM;;;;;uBAKE,IAAI,CAAC,QAAQ;2BACT,IAAI,CAAC,YAAY;2BACjB,IAAI,CAAC,QAAQ;2BACb,IAAI,CAAC,SAAS;;;;;KAKpC,CAAA;IACH,CAAC;;AAlEM,kBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;GAWlB,CAAC;AAEa;IAAd,QAAQ,CAAC,EAAG,CAAC;2CAA4C;AAC3C;IAAd,QAAQ,CAAC,EAAG,CAAC;8CAA0B;AACzB;IAAd,QAAQ,CAAC,EAAG,CAAC;iDAAyB;AACxB;IAAd,QAAQ,CAAC,EAAG,CAAC;6CAAqB","sourcesContent":["import { html, css, LitElement, property } from 'lit-element'\nimport { BridgeElement } from './BridgeElement'\nimport { HumanElement } from './HumanElement'\n\nexport class GameElement extends LitElement {\n  static styles = css`\n    .container {\n      display: flex;\n    }\n    .console-container {\n       text-align: center;\n    }\n    .human-container {\n      display: flexbox;\n      margin-top: 20px;\n    }\n  `;\n\n  @property({ }) Bridge: BridgeElement = new BridgeElement()\n  @property({ }) HumanList: HumanElement[]\n  @property({ }) currentIndex: number = 0\n  @property({ }) dieCount: number = 0\n\n  constructor () {\n    super()\n    this.HumanList = new Array(16).fill(0).map(e => new HumanElement())\n  }\n\n  step (_direction: string): void {\n    const direction = _direction === 'left' ? 0 : 1\n    const curIndex = this.currentIndex\n    const nextGlass = this.Bridge.glassPairList[curIndex].glasses[direction]\n\n    if (curIndex > 0) this.Bridge.glassPairList[curIndex - 1].glasses.map(glass => glass.playerOff())\n    nextGlass.takeStep()\n    const isHardGlass = nextGlass.isHard()\n    if (!isHardGlass) {\n      this.dieCount++\n      this.currentIndex = 0\n    } else {\n      this.currentIndex++\n    }\n  }\n\n  stepLeft () {\n    this.step('left')\n  }\n\n  stepRight () {\n    this.step('right')\n  }\n\n  render () {\n    return html`\n    <div class=container>\n\n      <div>\n        ${this.Bridge}\n      </div>\n      <div class=console-container>\n        <div class=button-container>\n\n          dieCount : ${this.dieCount} <br>\n          currentIndex : ${this.currentIndex} <br>\n          <button @click=${this.stepLeft}> Left </button>\n          <button @click=${this.stepRight}>Right</button>\n        </div>\n      </div>\n    </div>\n\n    `\n  }\n}\n"]}